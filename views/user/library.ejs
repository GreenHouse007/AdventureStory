<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('../partials/head') %>
  </head>
  <body>
    <%- include('../partials/header', { user }) %>

    <main class="container library">
      <h1 class="title">Story Library</h1>
      <p class="muted">
        Browse the adventures you can begin. Your choices will shape the endings
        you find.
      </p>

      <% const hasStories = Array.isArray(stories) && stories.length > 0; %>

      <% if (hasStories) { %>
      <div class="library-controls">
        <div class="search-control">
          <label for="storySearch" class="sr-only">Search stories</label>
          <input
            type="text"
            id="storySearch"
            class="search-input"
            placeholder="Search stories by name"
            autocomplete="off"
          />
        </div>
        <% if (Array.isArray(categories) && categories.length) { %>
        <button
          type="button"
          id="categoryFilterBtn"
          class="filter-toggle"
          aria-expanded="false"
        >
          Filter Categories
        </button>
        <% } %>
      </div>
      <% if (Array.isArray(categories) && categories.length) { %>
      <div id="categoryFilterPanel" class="filter-panel" hidden>
        <div class="filter-panel__header">
          <span>Filter by category</span>
          <button
            type="button"
            id="categoryFilterClose"
            class="filter-close"
            aria-label="Close category filters"
          >
            &times;
          </button>
        </div>
        <div class="filter-panel__options">
          <% categories.forEach(function(cat) { %>
          <label class="filter-option">
            <input type="checkbox" name="categoryFilter" value="<%= cat %>" />
            <span><%= cat %></span>
          </label>
          <% }) %>
        </div>
        <div class="filter-panel__actions">
          <button type="button" id="categoryFilterClear" class="ghost">
            Clear Filters
          </button>
        </div>
      </div>
      <% } %>
      <% } %>

      <% if (!hasStories) { %>
      <div class="empty-state">
        <p>No stories available yet. Check back soon!</p>
      </div>
      <% } else { %>
      <div class="grid card-grid" id="libraryGrid">
        <% stories.forEach(function(story) { %>
        <div
          class="story-card"
          data-title="<%= (story.title || 'Untitled Story').toLowerCase() %>"
          data-categories='<%- JSON.stringify(story.categories || []) %>'
        >
          <div class="story-card__media">
            <img
              src="<%= story.coverImage || '/images/default-cover.svg' %>"
              alt="<%= story.title %>"
            />
          </div>
          <div class="story-card__body">
            <div class="story-card__content">
              <h3><%= story.title %></h3>
              <p><%= story.description %></p>
            </div>

            <% const hasCategories = Array.isArray(story.categories) && story.categories.length > 0; %>
            <% const showProgress = Number(story.totalEndings) > 0; %>
            <% if (hasCategories || showProgress) { %>
            <div class="story-card__meta">
              <% if (hasCategories) { %>
              <ul class="tag-list">
                <% story.categories.forEach(function(cat) { %>
                <li class="tag"><%= cat %></li>
                <% }) %>
              </ul>
              <% } %>

              <% if (showProgress) { %>
              <p class="ending-progress">
                <strong><%= story.foundCount %></strong> /
                <%= story.totalEndings %> endings found
              </p>
              <% } %>
            </div>
            <% } %>

            <div class="story-card__actions">
              <% if (story.status === "public") { %>
              <a href="/u/story/<%= story._id %>" class="cta-button">Play</a>
              <% } else { %>
              <span class="coming-soon">Coming Soon</span>
              <% } %>
            </div>
          </div>
        </div>
        <% }) %>
      </div>
      <div id="noLibraryResults" class="empty-state" hidden>
        <p>No stories match your search or filters.</p>
      </div>
      <% } %>

      <!-- Centered, blocking Trophy Modal -->
      <% if (Array.isArray(trophyPopups) && trophyPopups.length) { %>
      <div
        id="trophy-modal-overlay"
        class="trophy-modal-overlay"
        aria-hidden="false"
      ></div>

      <div
        id="trophy-modal"
        class="trophy-modal"
        role="dialog"
        aria-modal="true"
        aria-labelledby="trophy-modal-title"
        aria-describedby="trophy-modal-message"
      >
        <div class="trophy-icon">üèÜ</div>
        <h2 id="trophy-modal-title" class="trophy-title">Trophy Unlocked!</h2>
        <div id="trophy-modal-message" class="trophy-message">
          <%= trophyPopups[0].message %>
        </div>
        <div class="trophy-coins" id="trophy-modal-coins">
          +<%= trophyPopups[0].amount %> coins
        </div>

        <div class="trophy-actions">
          <button
            id="trophy-modal-btn"
            class="btn btn-primary"
            type="button"
            autofocus
          >
            Next
          </button>
        </div>
      </div>

      <script>
        (function () {
          // Inject as a real JS array to avoid JSON.parse quoting issues
          const queue = <%- JSON.stringify(trophyPopups || []) %>;

          const overlay = document.getElementById('trophy-modal-overlay');
          const modal   = document.getElementById('trophy-modal');
          const message = document.getElementById('trophy-modal-message');
          const coinsEl = document.getElementById('trophy-modal-coins');
          const btn     = document.getElementById('trophy-modal-btn');

          if (!Array.isArray(queue) || queue.length === 0 || !overlay || !modal || !message || !coinsEl || !btn) {
            console.error('[TrophyModal] Missing elements or empty queue.');
            if (modal) modal.classList.add('hide');
            if (overlay) overlay.classList.add('hide');
            document.body.classList.remove('has-modal');
            return;
          }

          let index = 0;

          function show(i) {
            const item = queue[i];
            if (!item) { return closeModal(); }
            message.textContent = item.message || 'Achievement unlocked!';
            coinsEl.textContent = `+${Number(item.amount || 0)} coins`;
            btn.textContent = (i < queue.length - 1) ? 'Next' : 'Got it';
            overlay.classList.remove('hide');
            modal.classList.remove('hide');
            document.body.classList.add('has-modal'); // block scroll via CSS
            btn.disabled = false;
            btn.focus();
          }

          function closeModal() {
            btn.disabled = true; // prevent double-clicks
            modal.classList.add('hide');
            overlay.classList.add('hide');
            document.body.classList.remove('has-modal');
            setTimeout(() => {
              if (modal && modal.parentNode) modal.parentNode.removeChild(modal);
              if (overlay && overlay.parentNode) overlay.parentNode.removeChild(overlay);
            }, 250);
          }

          btn.addEventListener('click', function () {
            index++;
            if (index < queue.length) {
              show(index);
            } else {
              closeModal();
            }
          });

          // Block outside clicks; require the button
          overlay.addEventListener('click', function (e) {
            e.preventDefault();
            e.stopPropagation();
          });

          // Block ESC from closing (explicit acknowledgement required)
          document.addEventListener('keydown', function (e) {
            if (e.key === 'Escape') {
              e.preventDefault();
            }
          });

          // Init
          show(0);
        })();
      </script>
      <% } %>
    </main>

    <%- include('../partials/footer') %>

    <script>
      (function () {
        const searchInput = document.getElementById("storySearch");
        const filterBtn = document.getElementById("categoryFilterBtn");
        const filterPanel = document.getElementById("categoryFilterPanel");
        const filterClose = document.getElementById("categoryFilterClose");
        const filterClear = document.getElementById("categoryFilterClear");
        const categoryCheckboxes = filterPanel
          ? Array.from(filterPanel.querySelectorAll('input[name="categoryFilter"]'))
          : [];
        const cards = Array.from(
          document.querySelectorAll("#libraryGrid .story-card")
        );
        const noResults = document.getElementById("noLibraryResults");

        const parseCategories = (card) => {
          try {
            const raw = card.dataset.categories;
            if (!raw) return [];
            const parsed = JSON.parse(raw);
            return Array.isArray(parsed) ? parsed : [];
          } catch (err) {
            console.warn("Failed to parse categories for card", err);
            return [];
          }
        };

        const applyFilters = () => {
          const searchValue = (searchInput?.value || "").trim().toLowerCase();
          const selectedCategories = categoryCheckboxes
            .filter((checkbox) => checkbox.checked)
            .map((checkbox) => checkbox.value);

          let visibleCount = 0;
          cards.forEach((card) => {
            const title = (card.dataset.title || "").toLowerCase();
            const categories = parseCategories(card);
            const matchesSearch = !searchValue || title.includes(searchValue);
            const matchesCategory =
              selectedCategories.length === 0 ||
              categories.some((cat) => selectedCategories.includes(cat));

            const isVisible = matchesSearch && matchesCategory;
            card.classList.toggle("is-hidden", !isVisible);
            if (isVisible) visibleCount++;
          });

          if (noResults) {
            noResults.hidden = visibleCount > 0;
          }
        };

        const setPanelVisible = (show) => {
          if (!filterPanel || !filterBtn) return;
          filterPanel.hidden = !show;
          filterBtn.setAttribute("aria-expanded", String(show));
        };

        searchInput?.addEventListener("input", applyFilters);
        categoryCheckboxes.forEach((checkbox) => {
          checkbox.addEventListener("change", applyFilters);
        });

        filterBtn?.addEventListener("click", () => {
          if (!filterPanel) return;
          const willShow = filterPanel.hidden;
          setPanelVisible(willShow);
        });

        filterClose?.addEventListener("click", () => setPanelVisible(false));

        filterClear?.addEventListener("click", () => {
          categoryCheckboxes.forEach((checkbox) => {
            checkbox.checked = false;
          });
          applyFilters();
        });

        document.addEventListener("click", (event) => {
          if (!filterPanel || filterPanel.hidden) return;
          if (
            filterPanel.contains(event.target) ||
            filterBtn?.contains(event.target)
          ) {
            return;
          }
          setPanelVisible(false);
        });

        applyFilters();
      })();
    </script>

    <style>
      .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
      }

      .library-controls {
        display: flex;
        flex-wrap: wrap;
        column-gap: 1.1rem;
        row-gap: 0.75rem;
        align-items: flex-start;
        margin: 1.5rem 0 1rem;
      }

      .search-control {
        flex: 1 1 200px;
        max-width: 260px;
        min-width: 180px;
        width: min(260px, 100%);
      }

      .search-input {
        width: 100%;
        padding: 0.6rem 0.85rem;
        border: 1px solid #d0d0d0;
        border-radius: 999px;
        font-size: 1rem;
      }

      .search-input:focus {
        outline: none;
        border-color: #4f46e5;
        box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.18);
      }

      .filter-toggle {
        padding: 0.55rem 1.1rem;
        border-radius: 999px;
        border: 1px solid #4f46e5;
        background: #4f46e5;
        color: #fff;
        cursor: pointer;
        font-size: 0.95rem;
        transition: background 0.2s ease, color 0.2s ease;
        flex-shrink: 0;
      }

      .filter-toggle[aria-expanded="true"] {
        background: #312e81;
      }

      .filter-toggle:hover {
        background: #4338ca;
      }

      .filter-panel {
        border: 1px solid #374151;
        border-radius: 12px;
        padding: 1rem;
        margin-bottom: 1.5rem;
        max-width: 520px;
        background: #1f2937;
        color: #f9fafb;
        box-shadow: 0 12px 32px rgba(0, 0, 0, 0.28);
      }

      .filter-panel__header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.75rem;
        font-weight: 600;
        color: #e5e7eb;
      }

      .filter-close {
        background: none;
        border: none;
        font-size: 1.4rem;
        line-height: 1;
        cursor: pointer;
        color: #d1d5db;
      }

      .filter-panel__options {
        display: flex;
        flex-wrap: wrap;
        gap: 0.65rem;
        margin-bottom: 0.75rem;
      }

      .filter-option {
        display: inline-flex;
        align-items: center;
        gap: 0.35rem;
        padding: 0.35rem 0.65rem;
        border-radius: 999px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        background: rgba(255, 255, 255, 0.08);
        font-size: 0.88rem;
        color: #f3f4f6;
      }

      .filter-option span {
        color: inherit;
      }

      .filter-option input[type="checkbox"] {
        accent-color: #4f46e5;
      }

      .filter-panel__actions {
        display: flex;
        justify-content: flex-end;
      }

      .filter-panel__actions .ghost {
        background: transparent;
        border: none;
        color: #c7d2fe;
        cursor: pointer;
        font-size: 0.9rem;
      }

      .story-card.is-hidden {
        display: none;
      }

      /* Prevent background scroll when modal is open */
      body.has-modal {
        overflow: hidden;
      }

      /* Modal overlay + dialog */
      .trophy-modal-overlay {
        position: fixed;
        inset: 0;
        background: rgba(0, 0, 0, 0.6);
        z-index: 1000;
        opacity: 1;
        transition: opacity 0.25s ease;
      }
      .trophy-modal-overlay.hide {
        opacity: 0;
        pointer-events: none;
      }

      .trophy-modal {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) scale(1);
        z-index: 1001;
        width: min(560px, 92vw);
        max-width: 92vw;
        background: #121417;
        color: #fff;
        border: 1px solid #2a2f36;
        border-radius: 16px;
        padding: 28px 22px;
        box-shadow: 0 24px 72px rgba(0, 0, 0, 0.45);
        text-align: center;
        opacity: 1;
        transition: opacity 0.25s ease, transform 0.25s ease;
      }
      .trophy-modal.hide {
        opacity: 0;
        transform: translate(-50%, -50%) scale(0.98);
        pointer-events: none;
      }

      .trophy-icon {
        font-size: 56px;
        line-height: 1;
        margin-bottom: 8px;
      }
      .trophy-title {
        margin: 0 0 6px 0;
        font-size: 1.5rem;
        letter-spacing: 0.2px;
      }
      .trophy-message {
        font-size: 1.05rem;
        color: #dbe7ff;
      }
      .trophy-coins {
        margin-top: 6px;
        font-weight: 800;
        letter-spacing: 0.3px;
        color: #86efac; /* green accent */
      }

      .trophy-actions {
        margin-top: 16px;
      }
      .btn.btn-primary {
        background: #4ade80;
        color: #0b0f14;
        border: none;
        padding: 12px 20px;
        border-radius: 10px;
        font-weight: 700;
        cursor: pointer;
      }
      .btn.btn-primary:focus {
        outline: 3px solid #93c5fd;
        outline-offset: 2px;
      }
    </style>
  </body>
</html>
